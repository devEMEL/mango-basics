import {
  array,
  boolean,
  define,
  is,
  literal,
  number,
  object,
  record,
  string,
  tuple,
  union
} from "superstruct";
const MgoMoveFunctionArgType = union([string(), object({ Object: string() })]);
const MgoMoveFunctionArgTypes = array(MgoMoveFunctionArgType);
const MgoMoveModuleId = object({
  address: string(),
  name: string()
});
const MgoMoveVisibility = union([literal("Private"), literal("Public"), literal("Friend")]);
const MgoMoveAbilitySet = object({
  abilities: array(string())
});
const MgoMoveStructTypeParameter = object({
  constraints: MgoMoveAbilitySet,
  isPhantom: boolean()
});
const MgoMoveNormalizedTypeParameterType = object({
  TypeParameter: number()
});
const MoveCallMetric = tuple([
  object({
    module: string(),
    package: string(),
    function: string()
  }),
  string()
]);
const MoveCallMetrics = object({
  rank3Days: array(MoveCallMetric),
  rank7Days: array(MoveCallMetric),
  rank30Days: array(MoveCallMetric)
});
function isMgoMoveNormalizedType(value) {
  if (!value)
    return false;
  if (typeof value === "string")
    return true;
  if (is(value, MgoMoveNormalizedTypeParameterType))
    return true;
  if (isMgoMoveNormalizedStructType(value))
    return true;
  if (typeof value !== "object")
    return false;
  const valueProperties = value;
  if (is(valueProperties.Reference, MgoMoveNormalizedType))
    return true;
  if (is(valueProperties.MutableReference, MgoMoveNormalizedType))
    return true;
  if (is(valueProperties.Vector, MgoMoveNormalizedType))
    return true;
  return false;
}
const MgoMoveNormalizedType = define(
  "MgoMoveNormalizedType",
  isMgoMoveNormalizedType
);
function isMgoMoveNormalizedStructType(value) {
  if (!value || typeof value !== "object")
    return false;
  const valueProperties = value;
  if (!valueProperties.Struct || typeof valueProperties.Struct !== "object")
    return false;
  const structProperties = valueProperties.Struct;
  if (typeof structProperties.address !== "string" || typeof structProperties.module !== "string" || typeof structProperties.name !== "string" || !Array.isArray(structProperties.typeArguments) || !structProperties.typeArguments.every((value2) => isMgoMoveNormalizedType(value2))) {
    return false;
  }
  return true;
}
const MgoMoveNormalizedStructType = define(
  "MgoMoveNormalizedStructType",
  isMgoMoveNormalizedStructType
);
const MgoMoveNormalizedFunction = object({
  visibility: MgoMoveVisibility,
  isEntry: boolean(),
  typeParameters: array(MgoMoveAbilitySet),
  parameters: array(MgoMoveNormalizedType),
  return: array(MgoMoveNormalizedType)
});
const MgoMoveNormalizedField = object({
  name: string(),
  type: MgoMoveNormalizedType
});
const MgoMoveNormalizedStruct = object({
  abilities: MgoMoveAbilitySet,
  typeParameters: array(MgoMoveStructTypeParameter),
  fields: array(MgoMoveNormalizedField)
});
const MgoMoveNormalizedModule = object({
  fileFormatVersion: number(),
  address: string(),
  name: string(),
  friends: array(MgoMoveModuleId),
  structs: record(string(), MgoMoveNormalizedStruct),
  exposedFunctions: record(string(), MgoMoveNormalizedFunction)
});
const MgoMoveNormalizedModules = record(string(), MgoMoveNormalizedModule);
function extractMutableReference(normalizedType) {
  return typeof normalizedType === "object" && "MutableReference" in normalizedType ? normalizedType.MutableReference : void 0;
}
function extractReference(normalizedType) {
  return typeof normalizedType === "object" && "Reference" in normalizedType ? normalizedType.Reference : void 0;
}
function extractStructTag(normalizedType) {
  if (typeof normalizedType === "object" && "Struct" in normalizedType) {
    return normalizedType;
  }
  const ref = extractReference(normalizedType);
  const mutRef = extractMutableReference(normalizedType);
  if (typeof ref === "object" && "Struct" in ref) {
    return ref;
  }
  if (typeof mutRef === "object" && "Struct" in mutRef) {
    return mutRef;
  }
  return void 0;
}
export {
  MgoMoveAbilitySet,
  MgoMoveFunctionArgType,
  MgoMoveFunctionArgTypes,
  MgoMoveModuleId,
  MgoMoveNormalizedField,
  MgoMoveNormalizedFunction,
  MgoMoveNormalizedModule,
  MgoMoveNormalizedModules,
  MgoMoveNormalizedStruct,
  MgoMoveNormalizedStructType,
  MgoMoveNormalizedType,
  MgoMoveNormalizedTypeParameterType,
  MgoMoveStructTypeParameter,
  MgoMoveVisibility,
  MoveCallMetric,
  MoveCallMetrics,
  extractMutableReference,
  extractReference,
  extractStructTag
};
//# sourceMappingURL=normalized.js.map
