{
  "version": 3,
  "sources": ["../../../src/types/normalized.ts"],
  "sourcesContent": ["import type { Infer } from 'superstruct';\nimport {\n\tarray,\n\tboolean,\n\tdefine,\n\tis,\n\tliteral,\n\tnumber,\n\tobject,\n\trecord,\n\tstring,\n\ttuple,\n\tunion,\n} from 'superstruct';\n\nexport type MgoMoveFunctionArgTypesResponse = Infer<typeof MgoMoveFunctionArgType>[];\n\nexport const MgoMoveFunctionArgType = union([string(), object({ Object: string() })]);\n\nexport const MgoMoveFunctionArgTypes = array(MgoMoveFunctionArgType);\nexport type MgoMoveFunctionArgTypes = Infer<typeof MgoMoveFunctionArgTypes>;\n\nexport const MgoMoveModuleId = object({\n\taddress: string(),\n\tname: string(),\n});\nexport type MgoMoveModuleId = Infer<typeof MgoMoveModuleId>;\n\nexport const MgoMoveVisibility = union([literal('Private'), literal('Public'), literal('Friend')]);\nexport type MgoMoveVisibility = Infer<typeof MgoMoveVisibility>;\n\nexport const MgoMoveAbilitySet = object({\n\tabilities: array(string()),\n});\nexport type MgoMoveAbilitySet = Infer<typeof MgoMoveAbilitySet>;\n\nexport const MgoMoveStructTypeParameter = object({\n\tconstraints: MgoMoveAbilitySet,\n\tisPhantom: boolean(),\n});\nexport type MgoMoveStructTypeParameter = Infer<typeof MgoMoveStructTypeParameter>;\n\nexport const MgoMoveNormalizedTypeParameterType = object({\n\tTypeParameter: number(),\n});\nexport type MgoMoveNormalizedTypeParameterType = Infer<typeof MgoMoveNormalizedTypeParameterType>;\n\nexport type MgoMoveNormalizedType =\n\t| string\n\t| MgoMoveNormalizedTypeParameterType\n\t| { Reference: MgoMoveNormalizedType }\n\t| { MutableReference: MgoMoveNormalizedType }\n\t| { Vector: MgoMoveNormalizedType }\n\t| MgoMoveNormalizedStructType;\n\nexport const MoveCallMetric = tuple([\n\tobject({\n\t\tmodule: string(),\n\t\tpackage: string(),\n\t\tfunction: string(),\n\t}),\n\tstring(),\n]);\n\nexport type MoveCallMetric = Infer<typeof MoveCallMetric>;\n\nexport const MoveCallMetrics = object({\n\trank3Days: array(MoveCallMetric),\n\trank7Days: array(MoveCallMetric),\n\trank30Days: array(MoveCallMetric),\n});\n\nexport type MoveCallMetrics = Infer<typeof MoveCallMetrics>;\n\nfunction isMgoMoveNormalizedType(value: unknown): value is MgoMoveNormalizedType {\n\tif (!value) return false;\n\tif (typeof value === 'string') return true;\n\tif (is(value, MgoMoveNormalizedTypeParameterType)) return true;\n\tif (isMgoMoveNormalizedStructType(value)) return true;\n\tif (typeof value !== 'object') return false;\n\n\tconst valueProperties = value as Record<string, unknown>;\n\tif (is(valueProperties.Reference, MgoMoveNormalizedType)) return true;\n\tif (is(valueProperties.MutableReference, MgoMoveNormalizedType)) return true;\n\tif (is(valueProperties.Vector, MgoMoveNormalizedType)) return true;\n\treturn false;\n}\n\nexport const MgoMoveNormalizedType = define<MgoMoveNormalizedType>(\n\t'MgoMoveNormalizedType',\n\tisMgoMoveNormalizedType,\n);\n\nexport type MgoMoveNormalizedStructType = {\n\tStruct: {\n\t\taddress: string;\n\t\tmodule: string;\n\t\tname: string;\n\t\ttypeArguments: MgoMoveNormalizedType[];\n\t};\n};\n\nfunction isMgoMoveNormalizedStructType(value: unknown): value is MgoMoveNormalizedStructType {\n\tif (!value || typeof value !== 'object') return false;\n\n\tconst valueProperties = value as Record<string, unknown>;\n\tif (!valueProperties.Struct || typeof valueProperties.Struct !== 'object') return false;\n\n\tconst structProperties = valueProperties.Struct as Record<string, unknown>;\n\tif (\n\t\ttypeof structProperties.address !== 'string' ||\n\t\ttypeof structProperties.module !== 'string' ||\n\t\ttypeof structProperties.name !== 'string' ||\n\t\t!Array.isArray(structProperties.typeArguments) ||\n\t\t!structProperties.typeArguments.every((value) => isMgoMoveNormalizedType(value))\n\t) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\n// NOTE: This type is recursive, so we need to manually implement it:\nexport const MgoMoveNormalizedStructType = define<MgoMoveNormalizedStructType>(\n\t'MgoMoveNormalizedStructType',\n\tisMgoMoveNormalizedStructType,\n);\n\nexport const MgoMoveNormalizedFunction = object({\n\tvisibility: MgoMoveVisibility,\n\tisEntry: boolean(),\n\ttypeParameters: array(MgoMoveAbilitySet),\n\tparameters: array(MgoMoveNormalizedType),\n\treturn: array(MgoMoveNormalizedType),\n});\nexport type MgoMoveNormalizedFunction = Infer<typeof MgoMoveNormalizedFunction>;\n\nexport const MgoMoveNormalizedField = object({\n\tname: string(),\n\ttype: MgoMoveNormalizedType,\n});\nexport type MgoMoveNormalizedField = Infer<typeof MgoMoveNormalizedField>;\n\nexport const MgoMoveNormalizedStruct = object({\n\tabilities: MgoMoveAbilitySet,\n\ttypeParameters: array(MgoMoveStructTypeParameter),\n\tfields: array(MgoMoveNormalizedField),\n});\nexport type MgoMoveNormalizedStruct = Infer<typeof MgoMoveNormalizedStruct>;\n\nexport const MgoMoveNormalizedModule = object({\n\tfileFormatVersion: number(),\n\taddress: string(),\n\tname: string(),\n\tfriends: array(MgoMoveModuleId),\n\tstructs: record(string(), MgoMoveNormalizedStruct),\n\texposedFunctions: record(string(), MgoMoveNormalizedFunction),\n});\nexport type MgoMoveNormalizedModule = Infer<typeof MgoMoveNormalizedModule>;\n\nexport const MgoMoveNormalizedModules = record(string(), MgoMoveNormalizedModule);\nexport type MgoMoveNormalizedModules = Infer<typeof MgoMoveNormalizedModules>;\n\nexport function extractMutableReference(\n\tnormalizedType: MgoMoveNormalizedType,\n): MgoMoveNormalizedType | undefined {\n\treturn typeof normalizedType === 'object' && 'MutableReference' in normalizedType\n\t\t? normalizedType.MutableReference\n\t\t: undefined;\n}\n\nexport function extractReference(\n\tnormalizedType: MgoMoveNormalizedType,\n): MgoMoveNormalizedType | undefined {\n\treturn typeof normalizedType === 'object' && 'Reference' in normalizedType\n\t\t? normalizedType.Reference\n\t\t: undefined;\n}\n\nexport function extractStructTag(\n\tnormalizedType: MgoMoveNormalizedType,\n): MgoMoveNormalizedStructType | undefined {\n\tif (typeof normalizedType === 'object' && 'Struct' in normalizedType) {\n\t\treturn normalizedType;\n\t}\n\n\tconst ref = extractReference(normalizedType);\n\tconst mutRef = extractMutableReference(normalizedType);\n\n\tif (typeof ref === 'object' && 'Struct' in ref) {\n\t\treturn ref;\n\t}\n\n\tif (typeof mutRef === 'object' && 'Struct' in mutRef) {\n\t\treturn mutRef;\n\t}\n\treturn undefined;\n}\n"],
  "mappings": "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",
  "names": ["value"]
}
