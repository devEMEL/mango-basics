import {
  any,
  array,
  assign,
  boolean,
  is,
  literal,
  nullable,
  number,
  object,
  optional,
  record,
  string,
  tuple,
  union,
  unknown
} from "superstruct";
import { ObjectOwner } from "./common.js";
const ObjectType = union([string(), literal("package")]);
const MgoObjectRef = object({
  /** Base64 string representing the object digest */
  digest: string(),
  /** Hex code as string representing the object id */
  objectId: string(),
  /** Object version */
  version: union([number(), string()])
});
const MgoGasData = object({
  payment: array(MgoObjectRef),
  /** Gas Object's owner */
  owner: string(),
  price: string(),
  budget: string()
});
const MgoObjectInfo = assign(
  MgoObjectRef,
  object({
    type: string(),
    owner: ObjectOwner,
    previousTransaction: string()
  })
);
const ObjectContentFields = record(string(), any());
const MovePackageContent = record(string(), unknown());
const MgoMoveObject = object({
  /** Move type (e.g., "0x2::coin::Coin<0x2::mgo::MGO>") */
  type: string(),
  /** Fields and values stored inside the Move object */
  fields: ObjectContentFields,
  hasPublicTransfer: boolean()
});
const MgoMovePackage = object({
  /** A mapping from module name to disassembled Move bytecode */
  disassembled: MovePackageContent
});
const MgoParsedData = union([
  assign(MgoMoveObject, object({ dataType: literal("moveObject") })),
  assign(MgoMovePackage, object({ dataType: literal("package") }))
]);
const MgoRawMoveObject = object({
  /** Move type (e.g., "0x2::coin::Coin<0x2::mgo::MGO>") */
  type: string(),
  hasPublicTransfer: boolean(),
  version: string(),
  bcsBytes: string()
});
const MgoRawMovePackage = object({
  id: string(),
  /** A mapping from module name to Move bytecode enocded in base64*/
  moduleMap: record(string(), string())
});
const MgoRawData = union([
  assign(MgoRawMoveObject, object({ dataType: literal("moveObject") })),
  assign(MgoRawMovePackage, object({ dataType: literal("package") }))
]);
const MGO_DECIMALS = 9;
const MANGO_PER_MGO = BigInt(1e9);
const ObjectDigest = string();
const MgoObjectResponseError = object({
  code: string(),
  error: optional(string()),
  object_id: optional(string()),
  parent_object_id: optional(string()),
  version: optional(string()),
  digest: optional(string())
});
const DisplayFieldsResponse = object({
  data: nullable(optional(record(string(), string()))),
  error: nullable(optional(MgoObjectResponseError))
});
const DisplayFieldsBackwardCompatibleResponse = union([
  DisplayFieldsResponse,
  optional(record(string(), string()))
]);
const MgoObjectData = object({
  objectId: string(),
  version: string(),
  digest: string(),
  /**
   * Type of the object, default to be undefined unless MgoObjectDataOptions.showType is set to true
   */
  type: nullable(optional(string())),
  /**
   * Move object content or package content, default to be undefined unless MgoObjectDataOptions.showContent is set to true
   */
  content: nullable(optional(MgoParsedData)),
  /**
   * Move object content or package content in BCS bytes, default to be undefined unless MgoObjectDataOptions.showBcs is set to true
   */
  bcs: nullable(optional(MgoRawData)),
  /**
   * The owner of this object. Default to be undefined unless MgoObjectDataOptions.showOwner is set to true
   */
  owner: nullable(optional(ObjectOwner)),
  /**
   * The digest of the transaction that created or last mutated this object.
   * Default to be undefined unless MgoObjectDataOptions.showPreviousTransaction is set to true
   */
  previousTransaction: nullable(optional(string())),
  /**
   * The amount of MGO we would rebate if this object gets deleted.
   * This number is re-calculated each time the object is mutated based on
   * the present storage gas price.
   * Default to be undefined unless MgoObjectDataOptions.showStorageRebate is set to true
   */
  storageRebate: nullable(optional(string())),
  /**
   * Display metadata for this object, default to be undefined unless MgoObjectDataOptions.showDisplay is set to true
   * This can also be None if the struct type does not have Display defined
   * See more details in https://forums.mgo.io/t/nft-object-display-proposal/4872
   */
  display: nullable(optional(DisplayFieldsBackwardCompatibleResponse))
});
const MgoObjectDataOptions = object({
  /* Whether to fetch the object type, default to be true */
  showType: nullable(optional(boolean())),
  /* Whether to fetch the object content, default to be false */
  showContent: nullable(optional(boolean())),
  /* Whether to fetch the object content in BCS bytes, default to be false */
  showBcs: nullable(optional(boolean())),
  /* Whether to fetch the object owner, default to be false */
  showOwner: nullable(optional(boolean())),
  /* Whether to fetch the previous transaction digest, default to be false */
  showPreviousTransaction: nullable(optional(boolean())),
  /* Whether to fetch the storage rebate, default to be false */
  showStorageRebate: nullable(optional(boolean())),
  /* Whether to fetch the display metadata, default to be false */
  showDisplay: nullable(optional(boolean()))
});
const ObjectStatus = union([literal("Exists"), literal("notExists"), literal("Deleted")]);
const GetOwnedObjectsResponse = array(MgoObjectInfo);
const MgoObjectResponse = object({
  data: nullable(optional(MgoObjectData)),
  error: nullable(optional(MgoObjectResponseError))
});
function getMgoObjectData(resp) {
  return resp.data;
}
function getObjectDeletedResponse(resp) {
  if (resp.error && "object_id" in resp.error && "version" in resp.error && "digest" in resp.error) {
    const error = resp.error;
    return {
      objectId: error.object_id,
      version: error.version,
      digest: error.digest
    };
  }
  return void 0;
}
function getObjectNotExistsResponse(resp) {
  if (resp.error && "object_id" in resp.error && !("version" in resp.error) && !("digest" in resp.error)) {
    return resp.error.object_id;
  }
  return void 0;
}
function getObjectReference(resp) {
  if ("reference" in resp) {
    return resp.reference;
  }
  const exists = getMgoObjectData(resp);
  if (exists) {
    return {
      objectId: exists.objectId,
      version: exists.version,
      digest: exists.digest
    };
  }
  return getObjectDeletedResponse(resp);
}
function getObjectId(data) {
  if ("objectId" in data) {
    return data.objectId;
  }
  return getObjectReference(data)?.objectId ?? getObjectNotExistsResponse(data);
}
function getObjectVersion(data) {
  if ("version" in data) {
    return data.version;
  }
  return getObjectReference(data)?.version;
}
function isMgoObjectResponse(resp) {
  return resp.data !== void 0;
}
function getObjectType(resp) {
  const data = isMgoObjectResponse(resp) ? resp.data : resp;
  if (!data?.type && "data" in resp) {
    if (data?.content?.dataType === "package") {
      return "package";
    }
    return getMoveObjectType(resp);
  }
  return data?.type;
}
function getObjectPreviousTransactionDigest(resp) {
  return getMgoObjectData(resp)?.previousTransaction;
}
function getObjectOwner(resp) {
  if (is(resp, ObjectOwner)) {
    return resp;
  }
  return getMgoObjectData(resp)?.owner;
}
function getObjectDisplay(resp) {
  const display = getMgoObjectData(resp)?.display;
  if (!display) {
    return { data: null, error: null };
  }
  if (is(display, DisplayFieldsResponse)) {
    return display;
  }
  return {
    data: display,
    error: null
  };
}
function getSharedObjectInitialVersion(resp) {
  const owner = getObjectOwner(resp);
  if (owner && typeof owner === "object" && "Shared" in owner) {
    return owner.Shared.initial_shared_version;
  } else {
    return void 0;
  }
}
function isSharedObject(resp) {
  const owner = getObjectOwner(resp);
  return !!owner && typeof owner === "object" && "Shared" in owner;
}
function isImmutableObject(resp) {
  const owner = getObjectOwner(resp);
  return owner === "Immutable";
}
function getMoveObjectType(resp) {
  return getMoveObject(resp)?.type;
}
function getObjectFields(resp) {
  if ("fields" in resp) {
    return resp.fields;
  }
  return getMoveObject(resp)?.fields;
}
function isMgoObjectDataWithContent(data) {
  return data.content !== void 0;
}
function getMoveObject(data) {
  const mgoObject = "data" in data ? getMgoObjectData(data) : data;
  if (!mgoObject || !isMgoObjectDataWithContent(mgoObject) || mgoObject.content.dataType !== "moveObject") {
    return void 0;
  }
  return mgoObject.content;
}
function hasPublicTransfer(data) {
  return getMoveObject(data)?.hasPublicTransfer ?? false;
}
function getMovePackageContent(data) {
  if ("disassembled" in data) {
    return data.disassembled;
  }
  const mgoObject = getMgoObjectData(data);
  if (mgoObject?.content?.dataType !== "package") {
    return void 0;
  }
  return mgoObject.content.disassembled;
}
const CheckpointedObjectId = object({
  objectId: string(),
  atCheckpoint: optional(number())
});
const PaginatedObjectsResponse = object({
  data: array(MgoObjectResponse),
  nextCursor: optional(nullable(string())),
  hasNextPage: boolean()
});
const ObjectRead = union([
  object({
    details: MgoObjectData,
    status: literal("VersionFound")
  }),
  object({
    details: string(),
    status: literal("ObjectNotExists")
  }),
  object({
    details: MgoObjectRef,
    status: literal("ObjectDeleted")
  }),
  object({
    details: tuple([string(), number()]),
    status: literal("VersionNotFound")
  }),
  object({
    details: object({
      asked_version: number(),
      latest_version: number(),
      object_id: string()
    }),
    status: literal("VersionTooHigh")
  })
]);
export {
  CheckpointedObjectId,
  DisplayFieldsBackwardCompatibleResponse,
  DisplayFieldsResponse,
  GetOwnedObjectsResponse,
  MANGO_PER_MGO,
  MGO_DECIMALS,
  MgoGasData,
  MgoMoveObject,
  MgoMovePackage,
  MgoObjectData,
  MgoObjectDataOptions,
  MgoObjectInfo,
  MgoObjectRef,
  MgoObjectResponse,
  MgoObjectResponseError,
  MgoParsedData,
  MgoRawData,
  MgoRawMoveObject,
  MgoRawMovePackage,
  MovePackageContent,
  ObjectContentFields,
  ObjectDigest,
  ObjectRead,
  ObjectStatus,
  ObjectType,
  PaginatedObjectsResponse,
  getMgoObjectData,
  getMoveObject,
  getMoveObjectType,
  getMovePackageContent,
  getObjectDeletedResponse,
  getObjectDisplay,
  getObjectFields,
  getObjectId,
  getObjectNotExistsResponse,
  getObjectOwner,
  getObjectPreviousTransactionDigest,
  getObjectReference,
  getObjectType,
  getObjectVersion,
  getSharedObjectInitialVersion,
  hasPublicTransfer,
  isImmutableObject,
  isMgoObjectResponse,
  isSharedObject
};
//# sourceMappingURL=objects.js.map
