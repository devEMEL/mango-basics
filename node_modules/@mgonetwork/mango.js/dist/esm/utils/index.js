import { formatAddress, formatDigest } from "./format.js";
import {
  isValidMgoAddress,
  isValidMgoObjectId,
  isValidTransactionDigest,
  MGO_ADDRESS_LENGTH,
  normalizeMgoAddress,
  normalizeMgoObjectId,
  normalizeStructTag,
  parseStructTag
} from "./mgo-types";
import { fromB64, toB64, fromHEX, toHEX } from "@mgonetwork/bcs";
import { is, assert } from "superstruct";
const MGO_DECIMALS = 9;
const MANGO_PER_MGO = BigInt(1e9);
const MOVE_STDLIB_ADDRESS = "0x1";
const MGO_FRAMEWORK_ADDRESS = "0x2";
const MGO_SYSTEM_ADDRESS = "0x3";
const MGO_CLOCK_OBJECT_ID = normalizeMgoObjectId("0x6");
const MGO_SYSTEM_MODULE_NAME = "mgo_system";
const MGO_TYPE_ARG = `${MGO_FRAMEWORK_ADDRESS}::mgo::MGO`;
const MGO_SYSTEM_STATE_OBJECT_ID = normalizeMgoObjectId("0x5");
const MGO_USDT_ADDRESS = "0xefd048221d577dfb24218d5ffd03de4f364e2d1bed4e030a861a0ec01cb75b1";
export {
  MANGO_PER_MGO,
  MGO_ADDRESS_LENGTH,
  MGO_CLOCK_OBJECT_ID,
  MGO_DECIMALS,
  MGO_FRAMEWORK_ADDRESS,
  MGO_SYSTEM_ADDRESS,
  MGO_SYSTEM_MODULE_NAME,
  MGO_SYSTEM_STATE_OBJECT_ID,
  MGO_TYPE_ARG,
  MGO_USDT_ADDRESS,
  MOVE_STDLIB_ADDRESS,
  assert,
  formatAddress,
  formatDigest,
  fromB64,
  fromHEX,
  is,
  isValidMgoAddress,
  isValidMgoObjectId,
  isValidTransactionDigest,
  normalizeMgoAddress,
  normalizeMgoObjectId,
  normalizeStructTag,
  parseStructTag,
  toB64,
  toHEX
};
//# sourceMappingURL=index.js.map
