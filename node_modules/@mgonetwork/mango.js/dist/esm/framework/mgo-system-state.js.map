{
  "version": 3,
  "sources": ["../../../src/framework/mgo-system-state.ts"],
  "sourcesContent": ["import { TransactionBlock } from '../builder/index.js';\nimport type { MgoClient } from '../client/index.js';\nimport type { JsonRpcProvider } from '../providers/json-rpc-provider.js';\nimport { getObjectReference } from '../types/index.js';\nimport { normalizeMgoObjectId } from '../utils/mgo-types';\nimport { MGO_SYSTEM_ADDRESS } from './framework.js';\n\n/**\n * Address of the Mgo System object.\n * Always the same in every Mgo network (local, devnet, testnet).\n */\nexport const MGO_SYSTEM_STATE_OBJECT_ID: string = normalizeMgoObjectId('0x5');\n\nexport const MGO_SYSTEM_MODULE_NAME = 'mgo_system';\nexport const ADD_STAKE_FUN_NAME = 'request_add_stake';\nexport const ADD_STAKE_LOCKED_COIN_FUN_NAME = 'request_add_stake_with_locked_coin';\nexport const WITHDRAW_STAKE_FUN_NAME = 'request_withdraw_stake';\n\n/**\n * Utility class for `0x5` object\n */\nexport class MgoSystemStateUtil {\n\t/**\n\t * Create a new transaction for staking coins ready to be signed and executed with `signer-and-provider`.\n\t *\n\t * @param coins the coins to be staked\n\t * @param amount the amount to stake\n\t * @param gasBudget omittable only for DevInspect mode\n\t */\n\tpublic static async newRequestAddStakeTxn(\n\t\tclient: JsonRpcProvider | MgoClient,\n\t\tcoins: string[],\n\t\tamount: bigint,\n\t\tvalidatorAddress: string,\n\t): Promise<TransactionBlock> {\n\t\t// TODO: validate coin types and handle locked coins\n\t\tconst tx = new TransactionBlock();\n\n\t\tconst coin = tx.splitCoins(tx.gas, [tx.pure(amount)]);\n\t\ttx.moveCall({\n\t\t\ttarget: `${MGO_SYSTEM_ADDRESS}::${MGO_SYSTEM_MODULE_NAME}::${ADD_STAKE_FUN_NAME}`,\n\t\t\targuments: [tx.object(MGO_SYSTEM_STATE_OBJECT_ID), coin, tx.pure(validatorAddress)],\n\t\t});\n\t\tconst coinObjects = await client.multiGetObjects({\n\t\t\tids: coins,\n\t\t\toptions: {\n\t\t\t\tshowOwner: true,\n\t\t\t},\n\t\t});\n\t\ttx.setGasPayment(coinObjects.map((obj) => getObjectReference(obj)!));\n\t\treturn tx;\n\t}\n\n\t/**\n\t * Create a new transaction for withdrawing coins ready to be signed and\n\t * executed with `signer-and-provider`.\n\t *\n\t * @param stake the stake object created in the requestAddStake txn\n\t * @param stakedCoinId the coins to withdraw\n\t * @param gasBudget omittable only for DevInspect mode\n\t */\n\tpublic static async newRequestWithdrawlStakeTxn(\n\t\tstake: string,\n\t\tstakedCoinId: string,\n\t): Promise<TransactionBlock> {\n\t\tconst tx = new TransactionBlock();\n\t\ttx.moveCall({\n\t\t\ttarget: `${MGO_SYSTEM_ADDRESS}::${MGO_SYSTEM_MODULE_NAME}::${WITHDRAW_STAKE_FUN_NAME}`,\n\t\t\targuments: [tx.object(MGO_SYSTEM_STATE_OBJECT_ID), tx.object(stake), tx.object(stakedCoinId)],\n\t\t});\n\n\t\treturn tx;\n\t}\n}\n"],
  "mappings": "AAAA,SAAS,wBAAwB;AAGjC,SAAS,0BAA0B;AACnC,SAAS,4BAA4B;AACrC,SAAS,0BAA0B;AAM5B,MAAM,6BAAqC,qBAAqB,KAAK;AAErE,MAAM,yBAAyB;AAC/B,MAAM,qBAAqB;AAC3B,MAAM,iCAAiC;AACvC,MAAM,0BAA0B;AAKhC,MAAM,mBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQ/B,aAAoB,sBACnB,QACA,OACA,QACA,kBAC4B;AAE5B,UAAM,KAAK,IAAI,iBAAiB;AAEhC,UAAM,OAAO,GAAG,WAAW,GAAG,KAAK,CAAC,GAAG,KAAK,MAAM,CAAC,CAAC;AACpD,OAAG,SAAS;AAAA,MACX,QAAQ,GAAG,kBAAkB,KAAK,sBAAsB,KAAK,kBAAkB;AAAA,MAC/E,WAAW,CAAC,GAAG,OAAO,0BAA0B,GAAG,MAAM,GAAG,KAAK,gBAAgB,CAAC;AAAA,IACnF,CAAC;AACD,UAAM,cAAc,MAAM,OAAO,gBAAgB;AAAA,MAChD,KAAK;AAAA,MACL,SAAS;AAAA,QACR,WAAW;AAAA,MACZ;AAAA,IACD,CAAC;AACD,OAAG,cAAc,YAAY,IAAI,CAAC,QAAQ,mBAAmB,GAAG,CAAE,CAAC;AACnE,WAAO;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,aAAoB,4BACnB,OACA,cAC4B;AAC5B,UAAM,KAAK,IAAI,iBAAiB;AAChC,OAAG,SAAS;AAAA,MACX,QAAQ,GAAG,kBAAkB,KAAK,sBAAsB,KAAK,uBAAuB;AAAA,MACpF,WAAW,CAAC,GAAG,OAAO,0BAA0B,GAAG,GAAG,OAAO,KAAK,GAAG,GAAG,OAAO,YAAY,CAAC;AAAA,IAC7F,CAAC;AAED,WAAO;AAAA,EACR;AACD;",
  "names": []
}
