{
  "version": 3,
  "sources": ["../../../src/types/events.ts"],
  "sourcesContent": ["import type { Infer } from 'superstruct';\nimport { any, array, boolean, nullable, object, optional, record, string } from 'superstruct';\n\nimport { MgoJsonValue } from './common.js';\n\nexport const EventId = object({\n\ttxDigest: string(),\n\teventSeq: string(),\n});\n\n// event types mirror those in \"mgo-json-rpc-types/src/mgo_event.rs\"\n\nexport const MgoEvent = object({\n\tid: EventId,\n\t// Move package where this event was emitted.\n\tpackageId: string(),\n\t// Move module where this event was emitted.\n\ttransactionModule: string(),\n\t// Sender's Mgo address.\n\tsender: string(),\n\t// Move event type.\n\ttype: string(),\n\t// Parsed json value of the event\n\tparsedJson: optional(record(string(), any())),\n\t// Base 58 encoded bcs bytes of the move event\n\tbcs: optional(string()),\n\ttimestampMs: optional(string()),\n});\n\nexport type MgoEvent = Infer<typeof MgoEvent>;\n\nexport type MoveEventField = {\n\tpath: string;\n\tvalue: MgoJsonValue;\n};\n\n/**\n * Sequential event ID, ie (transaction seq number, event seq number).\n * 1) Serves as a unique event ID for each fullnode\n * 2) Also serves to sequence events for the purposes of pagination and querying.\n *    A higher id is an event seen later by that fullnode.\n * This ID is the \"cursor\" for event querying.\n */\nexport type EventId = Infer<typeof EventId>;\n\n// mirrors mgo_json_rpc_types::MgoEventFilter\nexport type MgoEventFilter =\n\t| { Package: string }\n\t| { MoveModule: { package: string; module: string } }\n\t| { MoveEventType: string }\n\t| { MoveEventField: MoveEventField }\n\t| { Transaction: string }\n\t| {\n\t\t\tTimeRange: {\n\t\t\t\t// left endpoint of time interval, milliseconds since epoch, inclusive\n\t\t\t\tstartTime: string;\n\t\t\t\t// right endpoint of time interval, milliseconds since epoch, exclusive\n\t\t\t\tendTime: string;\n\t\t\t};\n\t  }\n\t| { Sender: string }\n\t| { All: MgoEventFilter[] }\n\t| { Any: MgoEventFilter[] }\n\t| { And: [MgoEventFilter, MgoEventFilter] }\n\t| { Or: [MgoEventFilter, MgoEventFilter] };\n\nexport const PaginatedEvents = object({\n\tdata: array(MgoEvent),\n\tnextCursor: nullable(EventId),\n\thasNextPage: boolean(),\n});\nexport type PaginatedEvents = Infer<typeof PaginatedEvents>;\n\n/* ------------------------------- EventData ------------------------------ */\n\nexport function getEventSender(event: MgoEvent): string {\n\treturn event.sender;\n}\n\nexport function getEventPackage(event: MgoEvent): string {\n\treturn event.packageId;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,yBAAgF;AAIzE,MAAM,cAAU,2BAAO;AAAA,EAC7B,cAAU,2BAAO;AAAA,EACjB,cAAU,2BAAO;AAClB,CAAC;AAIM,MAAM,eAAW,2BAAO;AAAA,EAC9B,IAAI;AAAA;AAAA,EAEJ,eAAW,2BAAO;AAAA;AAAA,EAElB,uBAAmB,2BAAO;AAAA;AAAA,EAE1B,YAAQ,2BAAO;AAAA;AAAA,EAEf,UAAM,2BAAO;AAAA;AAAA,EAEb,gBAAY,iCAAS,+BAAO,2BAAO,OAAG,wBAAI,CAAC,CAAC;AAAA;AAAA,EAE5C,SAAK,iCAAS,2BAAO,CAAC;AAAA,EACtB,iBAAa,iCAAS,2BAAO,CAAC;AAC/B,CAAC;AAuCM,MAAM,sBAAkB,2BAAO;AAAA,EACrC,UAAM,0BAAM,QAAQ;AAAA,EACpB,gBAAY,6BAAS,OAAO;AAAA,EAC5B,iBAAa,4BAAQ;AACtB,CAAC;AAKM,SAAS,eAAe,OAAyB;AACvD,SAAO,MAAM;AACd;AAEO,SAAS,gBAAgB,OAAyB;AACxD,SAAO,MAAM;AACd;",
  "names": []
}
