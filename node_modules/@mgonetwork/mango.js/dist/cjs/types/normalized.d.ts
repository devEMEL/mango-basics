import type { Infer } from 'superstruct';
export type MgoMoveFunctionArgTypesResponse = Infer<typeof MgoMoveFunctionArgType>[];
export declare const MgoMoveFunctionArgType: import("superstruct").Struct<string | {
    Object: string;
}, null>;
export declare const MgoMoveFunctionArgTypes: import("superstruct").Struct<(string | {
    Object: string;
})[], import("superstruct").Struct<string | {
    Object: string;
}, null>>;
export type MgoMoveFunctionArgTypes = Infer<typeof MgoMoveFunctionArgTypes>;
export declare const MgoMoveModuleId: import("superstruct").Struct<{
    address: string;
    name: string;
}, {
    address: import("superstruct").Struct<string, null>;
    name: import("superstruct").Struct<string, null>;
}>;
export type MgoMoveModuleId = Infer<typeof MgoMoveModuleId>;
export declare const MgoMoveVisibility: import("superstruct").Struct<"Private" | "Public" | "Friend", null>;
export type MgoMoveVisibility = Infer<typeof MgoMoveVisibility>;
export declare const MgoMoveAbilitySet: import("superstruct").Struct<{
    abilities: string[];
}, {
    abilities: import("superstruct").Struct<string[], import("superstruct").Struct<string, null>>;
}>;
export type MgoMoveAbilitySet = Infer<typeof MgoMoveAbilitySet>;
export declare const MgoMoveStructTypeParameter: import("superstruct").Struct<{
    constraints: {
        abilities: string[];
    };
    isPhantom: boolean;
}, {
    constraints: import("superstruct").Struct<{
        abilities: string[];
    }, {
        abilities: import("superstruct").Struct<string[], import("superstruct").Struct<string, null>>;
    }>;
    isPhantom: import("superstruct").Struct<boolean, null>;
}>;
export type MgoMoveStructTypeParameter = Infer<typeof MgoMoveStructTypeParameter>;
export declare const MgoMoveNormalizedTypeParameterType: import("superstruct").Struct<{
    TypeParameter: number;
}, {
    TypeParameter: import("superstruct").Struct<number, null>;
}>;
export type MgoMoveNormalizedTypeParameterType = Infer<typeof MgoMoveNormalizedTypeParameterType>;
export type MgoMoveNormalizedType = string | MgoMoveNormalizedTypeParameterType | {
    Reference: MgoMoveNormalizedType;
} | {
    MutableReference: MgoMoveNormalizedType;
} | {
    Vector: MgoMoveNormalizedType;
} | MgoMoveNormalizedStructType;
export declare const MoveCallMetric: import("superstruct").Struct<[{
    function: string;
    package: string;
    module: string;
}, string], null>;
export type MoveCallMetric = Infer<typeof MoveCallMetric>;
export declare const MoveCallMetrics: import("superstruct").Struct<{
    rank3Days: [{
        function: string;
        package: string;
        module: string;
    }, string][];
    rank7Days: [{
        function: string;
        package: string;
        module: string;
    }, string][];
    rank30Days: [{
        function: string;
        package: string;
        module: string;
    }, string][];
}, {
    rank3Days: import("superstruct").Struct<[{
        function: string;
        package: string;
        module: string;
    }, string][], import("superstruct").Struct<[{
        function: string;
        package: string;
        module: string;
    }, string], null>>;
    rank7Days: import("superstruct").Struct<[{
        function: string;
        package: string;
        module: string;
    }, string][], import("superstruct").Struct<[{
        function: string;
        package: string;
        module: string;
    }, string], null>>;
    rank30Days: import("superstruct").Struct<[{
        function: string;
        package: string;
        module: string;
    }, string][], import("superstruct").Struct<[{
        function: string;
        package: string;
        module: string;
    }, string], null>>;
}>;
export type MoveCallMetrics = Infer<typeof MoveCallMetrics>;
export declare const MgoMoveNormalizedType: import("superstruct").Struct<MgoMoveNormalizedType, null>;
export type MgoMoveNormalizedStructType = {
    Struct: {
        address: string;
        module: string;
        name: string;
        typeArguments: MgoMoveNormalizedType[];
    };
};
export declare const MgoMoveNormalizedStructType: import("superstruct").Struct<MgoMoveNormalizedStructType, null>;
export declare const MgoMoveNormalizedFunction: import("superstruct").Struct<{
    visibility: "Private" | "Public" | "Friend";
    isEntry: boolean;
    typeParameters: {
        abilities: string[];
    }[];
    parameters: MgoMoveNormalizedType[];
    return: MgoMoveNormalizedType[];
}, {
    visibility: import("superstruct").Struct<"Private" | "Public" | "Friend", null>;
    isEntry: import("superstruct").Struct<boolean, null>;
    typeParameters: import("superstruct").Struct<{
        abilities: string[];
    }[], import("superstruct").Struct<{
        abilities: string[];
    }, {
        abilities: import("superstruct").Struct<string[], import("superstruct").Struct<string, null>>;
    }>>;
    parameters: import("superstruct").Struct<MgoMoveNormalizedType[], import("superstruct").Struct<MgoMoveNormalizedType, null>>;
    return: import("superstruct").Struct<MgoMoveNormalizedType[], import("superstruct").Struct<MgoMoveNormalizedType, null>>;
}>;
export type MgoMoveNormalizedFunction = Infer<typeof MgoMoveNormalizedFunction>;
export declare const MgoMoveNormalizedField: import("superstruct").Struct<{
    type: MgoMoveNormalizedType;
    name: string;
}, {
    name: import("superstruct").Struct<string, null>;
    type: import("superstruct").Struct<MgoMoveNormalizedType, null>;
}>;
export type MgoMoveNormalizedField = Infer<typeof MgoMoveNormalizedField>;
export declare const MgoMoveNormalizedStruct: import("superstruct").Struct<{
    fields: {
        type: MgoMoveNormalizedType;
        name: string;
    }[];
    abilities: {
        abilities: string[];
    };
    typeParameters: {
        constraints: {
            abilities: string[];
        };
        isPhantom: boolean;
    }[];
}, {
    abilities: import("superstruct").Struct<{
        abilities: string[];
    }, {
        abilities: import("superstruct").Struct<string[], import("superstruct").Struct<string, null>>;
    }>;
    typeParameters: import("superstruct").Struct<{
        constraints: {
            abilities: string[];
        };
        isPhantom: boolean;
    }[], import("superstruct").Struct<{
        constraints: {
            abilities: string[];
        };
        isPhantom: boolean;
    }, {
        constraints: import("superstruct").Struct<{
            abilities: string[];
        }, {
            abilities: import("superstruct").Struct<string[], import("superstruct").Struct<string, null>>;
        }>;
        isPhantom: import("superstruct").Struct<boolean, null>;
    }>>;
    fields: import("superstruct").Struct<{
        type: MgoMoveNormalizedType;
        name: string;
    }[], import("superstruct").Struct<{
        type: MgoMoveNormalizedType;
        name: string;
    }, {
        name: import("superstruct").Struct<string, null>;
        type: import("superstruct").Struct<MgoMoveNormalizedType, null>;
    }>>;
}>;
export type MgoMoveNormalizedStruct = Infer<typeof MgoMoveNormalizedStruct>;
export declare const MgoMoveNormalizedModule: import("superstruct").Struct<{
    address: string;
    name: string;
    fileFormatVersion: number;
    friends: {
        address: string;
        name: string;
    }[];
    structs: Record<string, {
        fields: {
            type: MgoMoveNormalizedType;
            name: string;
        }[];
        abilities: {
            abilities: string[];
        };
        typeParameters: {
            constraints: {
                abilities: string[];
            };
            isPhantom: boolean;
        }[];
    }>;
    exposedFunctions: Record<string, {
        visibility: "Private" | "Public" | "Friend";
        isEntry: boolean;
        typeParameters: {
            abilities: string[];
        }[];
        parameters: MgoMoveNormalizedType[];
        return: MgoMoveNormalizedType[];
    }>;
}, {
    fileFormatVersion: import("superstruct").Struct<number, null>;
    address: import("superstruct").Struct<string, null>;
    name: import("superstruct").Struct<string, null>;
    friends: import("superstruct").Struct<{
        address: string;
        name: string;
    }[], import("superstruct").Struct<{
        address: string;
        name: string;
    }, {
        address: import("superstruct").Struct<string, null>;
        name: import("superstruct").Struct<string, null>;
    }>>;
    structs: import("superstruct").Struct<Record<string, {
        fields: {
            type: MgoMoveNormalizedType;
            name: string;
        }[];
        abilities: {
            abilities: string[];
        };
        typeParameters: {
            constraints: {
                abilities: string[];
            };
            isPhantom: boolean;
        }[];
    }>, null>;
    exposedFunctions: import("superstruct").Struct<Record<string, {
        visibility: "Private" | "Public" | "Friend";
        isEntry: boolean;
        typeParameters: {
            abilities: string[];
        }[];
        parameters: MgoMoveNormalizedType[];
        return: MgoMoveNormalizedType[];
    }>, null>;
}>;
export type MgoMoveNormalizedModule = Infer<typeof MgoMoveNormalizedModule>;
export declare const MgoMoveNormalizedModules: import("superstruct").Struct<Record<string, {
    address: string;
    name: string;
    fileFormatVersion: number;
    friends: {
        address: string;
        name: string;
    }[];
    structs: Record<string, {
        fields: {
            type: MgoMoveNormalizedType;
            name: string;
        }[];
        abilities: {
            abilities: string[];
        };
        typeParameters: {
            constraints: {
                abilities: string[];
            };
            isPhantom: boolean;
        }[];
    }>;
    exposedFunctions: Record<string, {
        visibility: "Private" | "Public" | "Friend";
        isEntry: boolean;
        typeParameters: {
            abilities: string[];
        }[];
        parameters: MgoMoveNormalizedType[];
        return: MgoMoveNormalizedType[];
    }>;
}>, null>;
export type MgoMoveNormalizedModules = Infer<typeof MgoMoveNormalizedModules>;
export declare function extractMutableReference(normalizedType: MgoMoveNormalizedType): MgoMoveNormalizedType | undefined;
export declare function extractReference(normalizedType: MgoMoveNormalizedType): MgoMoveNormalizedType | undefined;
export declare function extractStructTag(normalizedType: MgoMoveNormalizedType): MgoMoveNormalizedStructType | undefined;
