"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var normalized_exports = {};
__export(normalized_exports, {
  MgoMoveAbilitySet: () => MgoMoveAbilitySet,
  MgoMoveFunctionArgType: () => MgoMoveFunctionArgType,
  MgoMoveFunctionArgTypes: () => MgoMoveFunctionArgTypes,
  MgoMoveModuleId: () => MgoMoveModuleId,
  MgoMoveNormalizedField: () => MgoMoveNormalizedField,
  MgoMoveNormalizedFunction: () => MgoMoveNormalizedFunction,
  MgoMoveNormalizedModule: () => MgoMoveNormalizedModule,
  MgoMoveNormalizedModules: () => MgoMoveNormalizedModules,
  MgoMoveNormalizedStruct: () => MgoMoveNormalizedStruct,
  MgoMoveNormalizedStructType: () => MgoMoveNormalizedStructType,
  MgoMoveNormalizedType: () => MgoMoveNormalizedType,
  MgoMoveNormalizedTypeParameterType: () => MgoMoveNormalizedTypeParameterType,
  MgoMoveStructTypeParameter: () => MgoMoveStructTypeParameter,
  MgoMoveVisibility: () => MgoMoveVisibility,
  MoveCallMetric: () => MoveCallMetric,
  MoveCallMetrics: () => MoveCallMetrics,
  extractMutableReference: () => extractMutableReference,
  extractReference: () => extractReference,
  extractStructTag: () => extractStructTag
});
module.exports = __toCommonJS(normalized_exports);
var import_superstruct = require("superstruct");
const MgoMoveFunctionArgType = (0, import_superstruct.union)([(0, import_superstruct.string)(), (0, import_superstruct.object)({ Object: (0, import_superstruct.string)() })]);
const MgoMoveFunctionArgTypes = (0, import_superstruct.array)(MgoMoveFunctionArgType);
const MgoMoveModuleId = (0, import_superstruct.object)({
  address: (0, import_superstruct.string)(),
  name: (0, import_superstruct.string)()
});
const MgoMoveVisibility = (0, import_superstruct.union)([(0, import_superstruct.literal)("Private"), (0, import_superstruct.literal)("Public"), (0, import_superstruct.literal)("Friend")]);
const MgoMoveAbilitySet = (0, import_superstruct.object)({
  abilities: (0, import_superstruct.array)((0, import_superstruct.string)())
});
const MgoMoveStructTypeParameter = (0, import_superstruct.object)({
  constraints: MgoMoveAbilitySet,
  isPhantom: (0, import_superstruct.boolean)()
});
const MgoMoveNormalizedTypeParameterType = (0, import_superstruct.object)({
  TypeParameter: (0, import_superstruct.number)()
});
const MoveCallMetric = (0, import_superstruct.tuple)([
  (0, import_superstruct.object)({
    module: (0, import_superstruct.string)(),
    package: (0, import_superstruct.string)(),
    function: (0, import_superstruct.string)()
  }),
  (0, import_superstruct.string)()
]);
const MoveCallMetrics = (0, import_superstruct.object)({
  rank3Days: (0, import_superstruct.array)(MoveCallMetric),
  rank7Days: (0, import_superstruct.array)(MoveCallMetric),
  rank30Days: (0, import_superstruct.array)(MoveCallMetric)
});
function isMgoMoveNormalizedType(value) {
  if (!value)
    return false;
  if (typeof value === "string")
    return true;
  if ((0, import_superstruct.is)(value, MgoMoveNormalizedTypeParameterType))
    return true;
  if (isMgoMoveNormalizedStructType(value))
    return true;
  if (typeof value !== "object")
    return false;
  const valueProperties = value;
  if ((0, import_superstruct.is)(valueProperties.Reference, MgoMoveNormalizedType))
    return true;
  if ((0, import_superstruct.is)(valueProperties.MutableReference, MgoMoveNormalizedType))
    return true;
  if ((0, import_superstruct.is)(valueProperties.Vector, MgoMoveNormalizedType))
    return true;
  return false;
}
const MgoMoveNormalizedType = (0, import_superstruct.define)(
  "MgoMoveNormalizedType",
  isMgoMoveNormalizedType
);
function isMgoMoveNormalizedStructType(value) {
  if (!value || typeof value !== "object")
    return false;
  const valueProperties = value;
  if (!valueProperties.Struct || typeof valueProperties.Struct !== "object")
    return false;
  const structProperties = valueProperties.Struct;
  if (typeof structProperties.address !== "string" || typeof structProperties.module !== "string" || typeof structProperties.name !== "string" || !Array.isArray(structProperties.typeArguments) || !structProperties.typeArguments.every((value2) => isMgoMoveNormalizedType(value2))) {
    return false;
  }
  return true;
}
const MgoMoveNormalizedStructType = (0, import_superstruct.define)(
  "MgoMoveNormalizedStructType",
  isMgoMoveNormalizedStructType
);
const MgoMoveNormalizedFunction = (0, import_superstruct.object)({
  visibility: MgoMoveVisibility,
  isEntry: (0, import_superstruct.boolean)(),
  typeParameters: (0, import_superstruct.array)(MgoMoveAbilitySet),
  parameters: (0, import_superstruct.array)(MgoMoveNormalizedType),
  return: (0, import_superstruct.array)(MgoMoveNormalizedType)
});
const MgoMoveNormalizedField = (0, import_superstruct.object)({
  name: (0, import_superstruct.string)(),
  type: MgoMoveNormalizedType
});
const MgoMoveNormalizedStruct = (0, import_superstruct.object)({
  abilities: MgoMoveAbilitySet,
  typeParameters: (0, import_superstruct.array)(MgoMoveStructTypeParameter),
  fields: (0, import_superstruct.array)(MgoMoveNormalizedField)
});
const MgoMoveNormalizedModule = (0, import_superstruct.object)({
  fileFormatVersion: (0, import_superstruct.number)(),
  address: (0, import_superstruct.string)(),
  name: (0, import_superstruct.string)(),
  friends: (0, import_superstruct.array)(MgoMoveModuleId),
  structs: (0, import_superstruct.record)((0, import_superstruct.string)(), MgoMoveNormalizedStruct),
  exposedFunctions: (0, import_superstruct.record)((0, import_superstruct.string)(), MgoMoveNormalizedFunction)
});
const MgoMoveNormalizedModules = (0, import_superstruct.record)((0, import_superstruct.string)(), MgoMoveNormalizedModule);
function extractMutableReference(normalizedType) {
  return typeof normalizedType === "object" && "MutableReference" in normalizedType ? normalizedType.MutableReference : void 0;
}
function extractReference(normalizedType) {
  return typeof normalizedType === "object" && "Reference" in normalizedType ? normalizedType.Reference : void 0;
}
function extractStructTag(normalizedType) {
  if (typeof normalizedType === "object" && "Struct" in normalizedType) {
    return normalizedType;
  }
  const ref = extractReference(normalizedType);
  const mutRef = extractMutableReference(normalizedType);
  if (typeof ref === "object" && "Struct" in ref) {
    return ref;
  }
  if (typeof mutRef === "object" && "Struct" in mutRef) {
    return mutRef;
  }
  return void 0;
}
//# sourceMappingURL=normalized.js.map
