{
  "version": 3,
  "sources": ["../../../src/utils/verify.ts"],
  "sourcesContent": ["import { fromB64 } from '@mgonetwork/bcs';\nimport { keccak_256 } from '@noble/hashes/sha3';\n\nimport { bcs } from '../bcs/index.js';\nimport { IntentScope, messageWithIntent } from '../cryptography/intent.js';\nimport type { SerializedSignature } from '../cryptography/signature.js';\nimport { toSingleSignaturePubkeyPair } from '../cryptography/utils.js';\n\n// TODO: This might actually make sense to eventually move to the `Keypair` instances themselves, as\n// it could allow the mango.js to be tree-shaken a little better, possibly allowing keypairs that are\n// not used (and their deps) to be entirely removed from the bundle.\n\n/** Verify data that is signed with the expected scope. */\nexport async function verifyMessage(\n\tmessage: Uint8Array | string,\n\tserializedSignature: SerializedSignature,\n\tscope: IntentScope,\n) {\n\tconst signature = toSingleSignaturePubkeyPair(serializedSignature);\n\n\tif (scope === IntentScope.PersonalMessage) {\n\t\tconst messageBytes = messageWithIntent(\n\t\t\tscope,\n\t\t\tbcs.ser(['vector', 'u8'], typeof message === 'string' ? fromB64(message) : message).toBytes(),\n\t\t);\n\n\t\tif (await signature.pubKey.verify(keccak_256(messageBytes), signature.signature)) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Fallback for backwards compatibility, old versions of the SDK\n\t\t// did not properly wrap PersonalMessages in a PersonalMessage bcs Struct\n\t\tconst unwrappedMessageBytes = messageWithIntent(\n\t\t\tscope,\n\t\t\ttypeof message === 'string' ? fromB64(message) : message,\n\t\t);\n\n\t\treturn signature.pubKey.verify(keccak_256(unwrappedMessageBytes), signature.signature);\n\t}\n\n\tconst messageBytes = messageWithIntent(\n\t\tscope,\n\t\ttypeof message === 'string' ? fromB64(message) : message,\n\t);\n\n\treturn signature.pubKey.verify(keccak_256(messageBytes), signature.signature);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAwB;AACxB,kBAA2B;AAE3B,IAAAA,cAAoB;AACpB,oBAA+C;AAE/C,mBAA4C;AAO5C,eAAsB,cACrB,SACA,qBACA,OACC;AACD,QAAM,gBAAY,0CAA4B,mBAAmB;AAEjE,MAAI,UAAU,0BAAY,iBAAiB;AAC1C,UAAMC,oBAAe;AAAA,MACpB;AAAA,MACA,gBAAI,IAAI,CAAC,UAAU,IAAI,GAAG,OAAO,YAAY,eAAW,oBAAQ,OAAO,IAAI,OAAO,EAAE,QAAQ;AAAA,IAC7F;AAEA,QAAI,MAAM,UAAU,OAAO,WAAO,wBAAWA,aAAY,GAAG,UAAU,SAAS,GAAG;AACjF,aAAO;AAAA,IACR;AAIA,UAAM,4BAAwB;AAAA,MAC7B;AAAA,MACA,OAAO,YAAY,eAAW,oBAAQ,OAAO,IAAI;AAAA,IAClD;AAEA,WAAO,UAAU,OAAO,WAAO,wBAAW,qBAAqB,GAAG,UAAU,SAAS;AAAA,EACtF;AAEA,QAAM,mBAAe;AAAA,IACpB;AAAA,IACA,OAAO,YAAY,eAAW,oBAAQ,OAAO,IAAI;AAAA,EAClD;AAEA,SAAO,UAAU,OAAO,WAAO,wBAAW,YAAY,GAAG,UAAU,SAAS;AAC7E;",
  "names": ["import_bcs", "messageBytes"]
}
