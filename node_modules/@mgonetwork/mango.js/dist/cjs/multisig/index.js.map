{
  "version": 3,
  "sources": ["../../../src/multisig/index.ts"],
  "sourcesContent": ["import { fromB64 } from '@mgonetwork/bcs';\n\nimport type { SignatureFlag } from '../cryptography/index.js';\nimport { SIGNATURE_FLAG_TO_SCHEME } from '../cryptography/index.js';\nimport { publicKeyFromRawBytes } from '../verify/index.js';\n\nexport * from './publickey.js';\n\nexport function publicKeyFromSuiBytes(publicKey: string | Uint8Array) {\n\tconst bytes = typeof publicKey === 'string' ? fromB64(publicKey) : publicKey;\n\n\tconst signatureScheme = SIGNATURE_FLAG_TO_SCHEME[bytes[0] as SignatureFlag];\n\n\t// if (signatureScheme === 'ZkLogin') {\n\t// \tthrow new Error('ZkLogin publicKey is not supported');\n\t// }\n\n\treturn publicKeyFromRawBytes(signatureScheme, bytes.slice(1));\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAwB;AAGxB,0BAAyC;AACzC,oBAAsC;AAEtC,6BAAc,2BANd;AAQO,SAAS,sBAAsB,WAAgC;AACrE,QAAM,QAAQ,OAAO,cAAc,eAAW,oBAAQ,SAAS,IAAI;AAEnE,QAAM,kBAAkB,6CAAyB,MAAM,CAAC,CAAkB;AAM1E,aAAO,qCAAsB,iBAAiB,MAAM,MAAM,CAAC,CAAC;AAC7D;",
  "names": []
}
